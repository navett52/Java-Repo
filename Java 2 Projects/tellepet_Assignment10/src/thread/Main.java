/******************************************************
 * Evan Tellep                                        *
 * Assignment 10                                      *
 * 04/05/2016                                         *
 * IT2045C (Computer Programming 2)                   *
 * The main method of the project                     *
 * Ref:Stack Overflow for timing                      *
 ******************************************************/

package thread;

import java.math.BigInteger;
import java.util.Random;

public class Main {

	public static void main(String[] args) {
		//The start time for the threaded program
		final long startTime = System.currentTimeMillis();

		GCF gcf = new GCF();
		Sort sort = new Sort();
		
		gcf.start();
		sort.start();
		
		try {
			gcf.join();
			sort.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		//The end time of the threaded program
		final long endTime = System.currentTimeMillis();
		//The total time of the threaded program
		long finalTime = endTime - startTime;
		System.out.println("This is how long the threaded program took: " + finalTime + " milliseconds");
///////////////////////////////////////////////////////////////////////////////////////////////
		System.out.println();
		long linearStart = System.currentTimeMillis();
		GCF test = new GCF();
		
		//Declaring and instantiating two BigIntegers to be used in a test
		BigInteger bigHonkingPrime1A = new BigInteger
		BigInteger bigHonkingPrime1B = new BigInteger

		//Declaring a BigInteger variable to hold the results of the EuclidBigInt test, then prints the result
		BigInteger bigGCD2 = test.gcd(bigHonkingPrime1A, bigHonkingPrime1B);
		System.out.println(bigGCD2);
		
		//declaring and instantiating a test array of unsorted numbers
		Random random = new Random();
		//Making an array to hold 100000 integers
		int[] testSort = new int[100000];
		//Assigns random numbers to the array
		for (int i = 0; i < testSort.length; i++) {
			testSort[i] = random.nextInt();
		}
		//sort the int array
		Sort sortTest = new Sort();
		
		//calling the sort method and assigning the returned array to the result array
		int[] result = sortTest.sort(testSort);
		
		System.out.println(result[100]);
		
		long linearEnd = System.currentTimeMillis();
		
		long linearTotal = linearEnd - linearStart;
		
		System.out.println("The total time of the non-threaded program is " + linearTotal + " milliseconds.");
	}

}
